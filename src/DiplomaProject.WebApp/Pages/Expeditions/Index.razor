@page "/expeditions/index"
@using DiplomaProject.Application.Expeditions.Queries
@using DiplomaProject.Application.Expeditions.Commands
@inject IMediator Mediator
@inject IMatToaster Toaster

<MatH5>Экспедиции</MatH5>

<MatButton Raised OnClick="() => IsCreateDialogOpened = true">Добавить экспедицию</MatButton>

@if(_expeditions == null)
{
    <MatProgressBar Indeterminate="true"/>
}
else
{
    <MatTable Items="@_expeditions" class="mat-elevation-z5" ShowFooter="false" ShowPaging="false" UseSortHeaderRow="true">
        <MatTableHeader>
            <th>#</th>
            <th>С даты</th>
            <th>По дату</th>
            <th></th>
            <th></th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Id</td>
            <td>@context.FromDate.ToString(DateTimeFormat)</td>
            <td>@context.ToDate.ToString(DateTimeFormat)</td>
            <td>
                <MatButton Outlined>Подробнее</MatButton>
            </td>
            <td>
                <MatButton Style="background-color: #B00020" Unelevated="true" OnClick="() => OpenDeleteDialog(context)">Удалить</MatButton>
            </td>
        </MatTableRow>
    </MatTable>
}

<MatDialog @bind-IsOpen="@IsDeleteDialogOpened">
    <MatDialogTitle>Удаление экспедиции</MatDialogTitle>
    <MatDialogContent>
        <p>Вы действительно хотите удалить данную экспедицию?</p>
        <p>С даты: @SelectedExpedition?.FromDate.ToString(DateTimeFormat)</p>
        <p>По дату: @SelectedExpedition?.ToDate.ToString(DateTimeFormat)</p>        
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="() => IsDeleteDialogOpened = false">Нет</MatButton>
        <MatButton Style="background-color: #B00020" Unelevated="true" OnClick="DeleteExpedition">Да, удалить</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@IsCreateDialogOpened">
    <MatDialogTitle>Добавление экспедиции</MatDialogTitle>
    <MatDialogContent>
        <p>
            <MatBody1>С даты</MatBody1>
            <MatDatePicker @bind-Value="@FromDate" Required="true"></MatDatePicker>
        </p>
        
        <p>
            <MatBody1>По дату</MatBody1>
            <MatDatePicker @bind-Value="@ToDate" Required="true"></MatDatePicker>
        </p>        
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="() => IsCreateDialogOpened = false">Отменить</MatButton>
        <MatButton Unelevated="true" OnClick="CreateExpedition">Добавить</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    private Expedition[] _expeditions;
        const string DateTimeFormat = "d MMMM yyyy года, dddd\n(Часовой пояс: K)";

    public bool IsDeleteDialogOpened { get; set; }
    public Expedition SelectedExpedition { get; set; }
    
    public bool IsCreateDialogOpened { get; set; }
    public DateTime FromDate { get; set; } = DateTime.Today;
    public DateTime ToDate { get; set; } = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        _expeditions = await Mediator.Send(new GetAllExpeditionsQuery());
    }

    private async Task OpenDeleteDialog(Expedition item)
    {
        SelectedExpedition = item;
        IsDeleteDialogOpened = true;
        IsCreateDialogOpened = false;
    }

    private async Task DeleteExpedition() 
    {
        const string message = "Экспедиция успешно удалена!";
        const string title = "Удаление экспедиции";

        try
        {
            await Mediator.Send(new DeleteExpeditionCommand
            {
                Id = SelectedExpedition.Id
            });
            Toaster.Add(message, MatToastType.Success, title);
            _expeditions = await Mediator.Send(new GetAllExpeditionsQuery());
        }
        catch(Exception e)
        {
            Toaster.Add(e.Message, MatToastType.Danger, title);
        }
        IsDeleteDialogOpened = false;
    }
    
    public async Task CreateExpedition()
    {
        try
        {
            var command = new CreateExpeditionCommand
            {
                FromDate = new DateTimeOffset(FromDate),
                ToDate = new DateTimeOffset(ToDate)
            };

            await Mediator.Send(command);
            Toaster.Add("Экспедиция успешно добавлена !", MatToastType.Success, "Добавление");
            _expeditions = await Mediator.Send(new GetAllExpeditionsQuery());
            IsCreateDialogOpened = false;
        }
        catch(Exception e)
        {
            Toaster.Add(e.Message, MatToastType.Danger, "Ошибка");
        }
    }

}