// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DiplomaProject.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    internal class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                    .HasAnnotation("ProductVersion", "3.1.4")
                    .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DiplomaProject.Domain.Entities.Bioresource", b =>
            {
                b.Property<int>("Id")
                 .ValueGeneratedOnAdd()
                 .HasColumnType("integer")
                 .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>("SectorId")
                 .HasColumnType("integer");

                b.Property<float>("Square")
                 .HasColumnType("real");

                b.Property<string>("Type")
                 .IsRequired()
                 .HasColumnType("text");

                b.Property<float>("Weight")
                 .HasColumnType("real");

                b.HasKey("Id");

                b.HasIndex("SectorId");

                b.ToTable("Bioresources");
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.Employee", b =>
            {
                b.Property<string>("Id")
                 .HasColumnType("text");

                b.Property<int>("AccessFailedCount")
                 .HasColumnType("integer");

                b.Property<DateTime>("BirthDay")
                 .HasColumnType("timestamp without time zone");

                b.Property<string>("ConcurrencyStamp")
                 .IsConcurrencyToken()
                 .HasColumnType("text");

                b.Property<string>("Email")
                 .HasColumnType("character varying(256)")
                 .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed")
                 .HasColumnType("boolean");

                b.Property<int>("EmployeePositionId")
                 .HasColumnType("integer");

                b.Property<DateTime>("EmploymentDate")
                 .HasColumnType("timestamp without time zone");

                b.Property<string>("FirstName")
                 .HasColumnType("text");

                b.Property<string>("LastName")
                 .HasColumnType("text");

                b.Property<bool>("LockoutEnabled")
                 .HasColumnType("boolean");

                b.Property<DateTimeOffset?>("LockoutEnd")
                 .HasColumnType("timestamp with time zone");

                b.Property<string>("MidName")
                 .HasColumnType("text");

                b.Property<string>("NormalizedEmail")
                 .HasColumnType("character varying(256)")
                 .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                 .HasColumnType("character varying(256)")
                 .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                 .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                 .HasColumnType("text");

                b.Property<bool>("PhoneNumberConfirmed")
                 .HasColumnType("boolean");

                b.Property<string>("SecurityStamp")
                 .HasColumnType("text");

                b.Property<int>("Sex")
                 .HasColumnType("integer");

                b.Property<bool>("TwoFactorEnabled")
                 .HasColumnType("boolean");

                b.Property<string>("UserName")
                 .HasColumnType("character varying(256)")
                 .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("EmployeePositionId");

                b.HasIndex("NormalizedEmail")
                 .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                 .IsUnique()
                 .HasName("UserNameIndex");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.EmployeeExpedition", b =>
            {
                b.Property<string>("EmployeeId")
                 .HasColumnType("text");

                b.Property<int>("ExpeditionId")
                 .HasColumnType("integer");

                b.HasKey("EmployeeId", "ExpeditionId");

                b.HasIndex("ExpeditionId");

                b.ToTable("EmployeeExpedition");
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.EmployeePosition", b =>
            {
                b.Property<int>("Id")
                 .ValueGeneratedOnAdd()
                 .HasColumnType("integer")
                 .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("Title")
                 .IsRequired()
                 .HasColumnType("character varying(100)")
                 .HasMaxLength(100);

                b.HasKey("Id");

                b.ToTable("EmployeePositions");
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.Expedition", b =>
            {
                b.Property<int>("Id")
                 .ValueGeneratedOnAdd()
                 .HasColumnType("integer")
                 .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<DateTime>("FromDate")
                 .HasColumnType("timestamp without time zone");

                b.Property<DateTime>("ToDate")
                 .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.ToTable("Expeditions");
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.ExpeditionSector", b =>
            {
                b.Property<int>("ExpeditionId")
                 .HasColumnType("integer");

                b.Property<int>("SectorId")
                 .HasColumnType("integer");

                b.HasKey("ExpeditionId", "SectorId");

                b.HasIndex("SectorId");

                b.ToTable("ExpeditionSector");
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.Litoral", b =>
            {
                b.Property<int>("Id")
                 .ValueGeneratedOnAdd()
                 .HasColumnType("integer")
                 .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("Title")
                 .IsRequired()
                 .HasColumnType("character varying(100)")
                 .HasMaxLength(100);

                b.HasKey("Id");

                b.ToTable("Litorals");
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.Sector", b =>
            {
                b.Property<int>("Id")
                 .ValueGeneratedOnAdd()
                 .HasColumnType("integer")
                 .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>("LitoralId")
                 .HasColumnType("integer");

                b.Property<float>("Square")
                 .HasColumnType("real");

                b.HasKey("Id");

                b.HasIndex("LitoralId")
                 .IsUnique();

                b.ToTable("Sectors");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                 .HasColumnType("text");

                b.Property<string>("ConcurrencyStamp")
                 .IsConcurrencyToken()
                 .HasColumnType("text");

                b.Property<string>("Name")
                 .HasColumnType("character varying(256)")
                 .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                 .HasColumnType("character varying(256)")
                 .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                 .IsUnique()
                 .HasName("RoleNameIndex");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                 .ValueGeneratedOnAdd()
                 .HasColumnType("integer")
                 .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                 .HasColumnType("text");

                b.Property<string>("ClaimValue")
                 .HasColumnType("text");

                b.Property<string>("RoleId")
                 .IsRequired()
                 .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                 .ValueGeneratedOnAdd()
                 .HasColumnType("integer")
                 .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                 .HasColumnType("text");

                b.Property<string>("ClaimValue")
                 .HasColumnType("text");

                b.Property<string>("UserId")
                 .IsRequired()
                 .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                 .HasColumnType("text");

                b.Property<string>("ProviderKey")
                 .HasColumnType("text");

                b.Property<string>("ProviderDisplayName")
                 .HasColumnType("text");

                b.Property<string>("UserId")
                 .IsRequired()
                 .HasColumnType("text");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                 .HasColumnType("text");

                b.Property<string>("RoleId")
                 .HasColumnType("text");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                 .HasColumnType("text");

                b.Property<string>("LoginProvider")
                 .HasColumnType("text");

                b.Property<string>("Name")
                 .HasColumnType("text");

                b.Property<string>("Value")
                 .HasColumnType("text");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.Bioresource", b =>
            {
                b.HasOne("DiplomaProject.Domain.Entities.Sector", "Sector")
                 .WithMany("Bioresources")
                 .HasForeignKey("SectorId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.Employee", b =>
            {
                b.HasOne("DiplomaProject.Domain.Entities.EmployeePosition", "EmployeePosition")
                 .WithMany("Employees")
                 .HasForeignKey("EmployeePositionId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.EmployeeExpedition", b =>
            {
                b.HasOne("DiplomaProject.Domain.Entities.Employee", "Employee")
                 .WithMany("Expeditions")
                 .HasForeignKey("EmployeeId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();

                b.HasOne("DiplomaProject.Domain.Entities.Expedition", "Expedition")
                 .WithMany("Employees")
                 .HasForeignKey("ExpeditionId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.ExpeditionSector", b =>
            {
                b.HasOne("DiplomaProject.Domain.Entities.Expedition", "Expedition")
                 .WithMany("Sectors")
                 .HasForeignKey("ExpeditionId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();

                b.HasOne("DiplomaProject.Domain.Entities.Sector", "Sector")
                 .WithMany("Expeditions")
                 .HasForeignKey("SectorId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();
            });

            modelBuilder.Entity("DiplomaProject.Domain.Entities.Sector", b =>
            {
                b.HasOne("DiplomaProject.Domain.Entities.Litoral", "Litoral")
                 .WithOne()
                 .HasForeignKey("DiplomaProject.Domain.Entities.Sector", "LitoralId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                 .WithMany()
                 .HasForeignKey("RoleId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("DiplomaProject.Domain.Entities.Employee", null)
                 .WithMany()
                 .HasForeignKey("UserId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("DiplomaProject.Domain.Entities.Employee", null)
                 .WithMany()
                 .HasForeignKey("UserId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                 .WithMany()
                 .HasForeignKey("RoleId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();

                b.HasOne("DiplomaProject.Domain.Entities.Employee", null)
                 .WithMany()
                 .HasForeignKey("UserId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("DiplomaProject.Domain.Entities.Employee", null)
                 .WithMany()
                 .HasForeignKey("UserId")
                 .OnDelete(DeleteBehavior.Cascade)
                 .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}