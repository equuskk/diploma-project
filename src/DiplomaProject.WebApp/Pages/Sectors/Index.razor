@page "/sectors/index"
@using DiplomaProject.Application.Sectors.Queries
@using DiplomaProject.Application.Sectors.Commands
@inject IMediator Mediator
@inject IMatToaster Toaster

<MatH5>Секторы</MatH5>

<MatButton Raised OnClick="() => IsCreateDialogOpened = true">Добавить сектор</MatButton>


@if(_sectors == null)
{
    <MatProgressBar Indeterminate="true"/>
}
else if(_sectors.Length == 0)
{
    <MatH3>Список пуст.</MatH3>
}
else
{
    <MatTable Items="@_sectors" class="mat-elevation-z5" PageRecordCountLabel="Кол-во секторов на страницу" Striped="true">
        <MatTableHeader>
            <th>Id</th>
            <th>Название</th>
            <th>Описание</th>
            <th>Действия</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Id</td>
            <td>@context.Title</td>
            <td>@context.Description</td>
            <td>
                <MatButton Class="button-danger" Unelevated="true" OnClick="() => OpenDeleteDialog(context)">Удалить сектор</MatButton>
            </td>
        </MatTableRow>
    </MatTable>
}

<MatDialog @bind-IsOpen="@IsDeleteDialogOpened">
    <MatDialogTitle>Удаление сектора</MatDialogTitle>
    <MatDialogContent>
        <MatBody1>Вы действительно хотите удалить данный сектор?</MatBody1>
        <MatBody2>Название: @SelectedItem?.Title</MatBody2>
        <MatBody2>Описание: @SelectedItem?.Description</MatBody2>
        <MatBody1 Class="text-danger">
            ВНИМАНИЕ! Данное действие приведёт к удалению всех связанных с сектором данных!
        </MatBody1>    
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="() => IsDeleteDialogOpened = false">Нет</MatButton>
        <MatButton Class="button-danger" Unelevated="true" OnClick="DeleteSector">Да, удалить</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@IsCreateDialogOpened">
    <MatDialogTitle>Добавление сектора</MatDialogTitle>
    <MatDialogContent>
        <p>
            <MatTextField @bind-Value="@SectorTitle" Label="Название"></MatTextField>
        </p>
        <p>
            <MatTextField @bind-Value="@SectorDescription" Label="Описание" TextArea="true" FullWidth="true" rows="6"></MatTextField>
        </p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="() => IsCreateDialogOpened = false">Отменить</MatButton>
        <MatButton Unelevated="true" OnClick="CreateSector">Добавить</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    private Sector[] _sectors;

    public bool IsDeleteDialogOpened { get; set; }
    public Sector SelectedItem { get; set; }

    public bool IsCreateDialogOpened { get; set; }
    public string SectorTitle { get; set; }
    public string SectorDescription { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _sectors = await Mediator.Send(new GetAllSectorsQuery());
    }

    public void OpenDeleteDialog(Sector sector)
    {
        IsDeleteDialogOpened = true;
        SelectedItem = sector;
    }

    public async Task DeleteSector()
    {
        const string message = "Сектор успешно удалён!";
        const string title = "Удаление сектора";

        try
        {
            await Mediator.Send(new DeleteSectorCommand
            {
                SectorId = SelectedItem.Id
            });
            Toaster.Add(message, MatToastType.Success, title);
            _sectors = await Mediator.Send(new GetAllSectorsQuery());
            IsDeleteDialogOpened = false;
        }
        catch(Exception e)
        {
            Toaster.Add(e.Message, MatToastType.Danger, title);
        }
    }
    
    public async Task CreateSector()
    {
        try
        {
            var command = new CreateSectorCommand()
            {
                Title = SectorTitle,
                Description = SectorDescription
            };

            await Mediator.Send(command);
            Toaster.Add("Сектор успешно добавлен!", MatToastType.Success, "Добавление");
            _sectors = await Mediator.Send(new GetAllSectorsQuery());
            IsCreateDialogOpened = false;
        }
        catch(Exception e)
        {
            Toaster.Add(e.Message, MatToastType.Danger, "Ошибка");
        }
    }

}