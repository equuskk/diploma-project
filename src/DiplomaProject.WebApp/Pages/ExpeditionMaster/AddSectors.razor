@page "/expeditionMaster/addSectors/{Id:int}"
@using DiplomaProject.Application.Sectors.Queries
@using DiplomaProject.Application.Expeditions.Commands
@inject IMatToaster Toaster
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = nameof(RoleNames.SeniorEmployee))]

<MatH5>Добавление секторов к эспедиции</MatH5>
<MatBody1>Для добавления сектора к экспедиции просто нажмите на нужную строчку</MatBody1>

<MatTable Items="@_sectors" Striped="true" AllowSelection="true" SelectionChanged="SelectionChangedEvent" ShowFooter="false" ShowPaging="false" PageSize="@int.MaxValue">
    <MatTableHeader>
        <th>Id</th>
        <th>Название</th>
        <th>Описание</th>
    </MatTableHeader>
    <MatTableRow>
        <td>@context.Id</td>
        <td>@context.Title</td>
        <td>@context.Description</td>
    </MatTableRow>
</MatTable>

<MatBody1>Выбранные сектора:</MatBody1>
<MatList>
    @foreach(var sector in SelectedSectors)
    {
        <MatListItem>
            @sector.Title
        </MatListItem>
    }
</MatList>

<MatButton Raised="true" OnClick="AddSectorsToExpedition">Перейти к добавлению сотрудников</MatButton>

@code {

    [Parameter]
    public int Id { get; set; }

    private Sector[] _sectors;

    public List<Sector> SelectedSectors { get; set; } = new List<Sector>();

    protected override async Task OnInitializedAsync()
    {
        _sectors = await Mediator.Send(new GetAllSectorsQuery());
    }

    public void SelectionChangedEvent(object row)
    {
        var sector = row as Sector;
        if(sector is null)
        {
            return;
        }

        if(SelectedSectors.Any(x => x.Id == sector.Id))
        {
            SelectedSectors.Remove(sector);
            StateHasChanged();
            return;
        }

        SelectedSectors.Add(sector);
        StateHasChanged();
    }

    public async Task AddSectorsToExpedition()
    {
        try
        {
            var command = new AddSectorsToExpeditionCommand
            {
                ExpeditionId = Id,
                SectorIds = SelectedSectors.Select(x => x.Id).ToArray()
            };

            await Mediator.Send(command);
            Toaster.Add("Сектора успешно добавлены к экспедиции!", MatToastType.Success, "Добавление");
            NavigationManager.NavigateTo($"/expeditionMaster/addEmployees/{Id}");
        }
        catch(Exception e)
        {
            Toaster.Add(e.Message, MatToastType.Danger, "Ошибка");
        }
    }

}